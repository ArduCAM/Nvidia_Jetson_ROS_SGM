#! /usr/bin/env python

# Declare parameters that control stereo processing

PACKAGE='gpu_stereo_image_proc'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# disparity block matching correlation parameters
gen.add("min_disparity", int_t, 0, "Disparity to begin search at, pixels (may be negative)", 0, -2048, 2048)
disparity_range_enum = gen.enum([gen.const("64", int_t, 64, "64"),
                               gen.const("128", int_t, 128, "128"),
                               gen.const("256", int_t, 256, "256")],
                               "Selectable options for max disparty")
gen.add("disparity_range", int_t, 0, "Number of disparities to search, pixels", 128, 64, 256,
        edit_method = disparity_range_enum)

# disparity block matching post-filtering parameters
# NOTE: Making uniqueness_ratio int_t instead of double_t to work around dynamic_reconfigure gui issue
gen.add("uniqueness_ratio",  double_t, 0, "Filter out if best match does not sufficiently exceed the next-best match", 15.0, 0, 100.0)

path_type_enum = gen.enum([gen.const("SCAN_4PATH", int_t, 0, "Aggregate cost from four directions forming a cross"),
                           gen.const("SCAN_8PATH", int_t, 1, "Aggregate cost over all scan lines")],
                           "Scan line directions used during cost aggregation step")
gen.add("path_type", int_t, 0, "Scan line directions used during cost aggregation step", 1, 0, 1,
        edit_method = path_type_enum)
gen.add("P1", double_t, 0, "Smoothness penalty", 10, 0, 256)
gen.add("P2", double_t, 0, "Discontiguous pennalty", 120, 0, 256)
# First string value is node name, used only for generating documentation
# Second string value ("LIBSGM") is name of class and generated
#    .h file, with "Config" added, so class DisparityConfig
exit(gen.generate(PACKAGE, "gpu_stereo_image_proc", "LIBSGM"))
