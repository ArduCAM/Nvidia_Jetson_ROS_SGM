#! /usr/bin/env python

# Declare parameters that control stereo processing

PACKAGE='gpu_stereo_image_proc'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# disparity block matching pre-filtering parameters
gen.add("shrink_scale", int_t, 0, "Image size will be shrinked by this factor. Must be a power of 2.", 1, 1, 64)

# disparity block matching correlation parameters
gen.add("correlation_window_size", int_t, 0, "SAD correlation window width, pixels", 5, 5, 31)
gen.add("bt_clip_value",           int_t, 0, "Truncation value (must be odd) for pre-filtering algorithm. It first computes x-derivative at each pixel and clips its value to [-bt_clip_value, bt_clip_value] interval.", 31, 15, 95)
gen.add("ct_win_size",             int_t, 0, "Specifies the census transform window size", 0, 0, 31)
gen.add("hc_win_size",             int_t, 0, "Specifies the hamming cost window size", 0, 0, 31)
gen.add("min_disparity",           int_t, 0, "Disparity to begin search at, pixels", 0, 0, 256)
gen.add("max_disparity",           int_t, 0, "Disparity to finish search at, pixels (Must be divisible by 4)", 64, 0, 256)

# scan path flags
gen.add("SCANLINE_LEFT_RIGHT",            bool_t, 0, "Aggregate cost from left to right horizontally", True)
gen.add("SCANLINE_TOP_LEFT_BOTTOM_RIGHT", bool_t, 0, "Aggregate cost from left to right diagonally starting from the top", True)
gen.add("SCANLINE_TOP_BOTTOM",            bool_t, 0, "Aggregate cost from top to bottom vertically", True)
gen.add("SCANLINE_TOP_RIGHT_BOTTOM_LEFT", bool_t, 0, "Aggregate cost from right to left diagonally starting from the top", True)
gen.add("SCANLINE_RIGHT_LEFT",            bool_t, 0, "Aggregate cost from right to left horizontally", True)
gen.add("SCANLINE_BOTTOM_RIGHT_TOP_LEFT", bool_t, 0, "Aggregate cost from right to left diagonally starting from the bottom", True),
gen.add("SCANLINE_BOTTOM_TOP",            bool_t, 0, "Aggregate cost from bottom to top vertically", True)
gen.add("SCANLINE_BOTTOM_LEFT_TOP_RIGHT", bool_t, 0, "Aggregate cost from left to right diagonally starting from the bottom", True),
path_type_enum = gen.enum([gen.const("Individual", int_t, 0, "Aggregate path will be OR-ed from the selections above"),
                           gen.const("SCANLINE_CROSS",   int_t, 1, "Aggregate cost from four directions forming a cross"),
                           gen.const("SCANLINE_ALL",     int_t, 2, "Aggregate cost over all scan lines")],
                           "Scan line directions used during cost aggregation step")
gen.add("path_type", int_t, 0, "Scan path type", 2, 0, 2,
        edit_method = path_type_enum)
gen.add("FILTER_TOP_AREA",  bool_t, 0, "Filter cost at top image area with low gradients.", False)
gen.add("PYRAMIDAL_STEREO", bool_t, 0, "Use pyramidal scheme: lower resolution imagery for nearby objects and the full resolution for far-away objects.", False)
# disparity block matching post-filtering parameters
# NOTE: Making uniqueness_ratio int_t instead of double_t to work around dynamic_reconfigure gui issue
gen.add("uniqueness_ratio",  double_t, 0, "Filter out if best match does not sufficiently exceed the next-best match", 15.0, 0, 100.0)
gen.add("P1", double_t, 0, "Smoothness penalty", 8, 0, 256)
gen.add("P2", double_t, 0, "Discontiguous pennalty", 109, 0, 256)
gen.add("disp12MaxDiff", int_t, 0, "Maximum allowed difference (in integer pixel units) in the left-right disparity check, only available in SGBM", 320, 0, 32000)
# First string value is node name, used only for generating documentation
# Second string value ("Disparity") is name of class and generated
#    .h file, with "Config" added, so class DisparityConfig
exit(gen.generate(PACKAGE, "gpu_stereo_image_proc", "VXSGBM"))
